---

clair-cve-scan-container:
  stage: SAST
  needs: ["pull:docker-image"]
  # yamllint disable-line rule:line-length
  image: docker:stable@sha256:279beeb5de99e09af79f13e85e20194ce68db4255e8b2d955e408be69d082b5a
  variables:
    DOCKER_DRIVER: overlay2
    # Defining two new variables based on GitLab's CI/CD predefined variables
    # https://docs.gitlab.com/ee/ci/variables/#predefined-environment-variables
    CLAIR_REPOSITORY: https://github.com/arminc/clair-scanner/
    # Prior to this, you need to have the Container Registry running for your
    # project and setup a build job
    # with at least the following steps:
    #
    # docker build -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG .
    # docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    #
    # Container Scanning deals with Docker images only so no need to import
    # the project's Git repository:
    GIT_STRATEGY: none
    # Services and containers running in the same Kubernetes pod are all
    # sharing the same localhost address
    # https://docs.gitlab.com/runner/executors/kubernetes.html
    DOCKER_SERVICE: docker
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://${DOCKER_SERVICE}:2375/"
    # https://hub.docker.com/r/arminc/clair-local-scan/tags
    CLAIR_LOCAL_SCAN_VERSION: v2.1.6_7830e9c2d00a55cde0bd21a2d837a81ecd415bd2
  allow_failure: true
  services:
    # yamllint disable-line rule:line-length
    - docker:stable-dind@sha256:331dafcf4b675f6ace9212a113d973a9cf56ea55c33415e1853e6ea1b474e0b6
  before_script:
    - docker pull "${CI_IMAGE}"
  script:
    - >
      if [ -z "${DOCKER_HOST}" -a "${KUBERNETES_PORT}" ]; then
      { export DOCKER_SERVICE="localhost" ;
      export DOCKER_HOST="tcp://${DOCKER_SERVICE}:2375" ; }
      fi
    - docker run -d --name db arminc/clair-db:latest
    - >
      docker run -p 6060:6060 --link db:postgres -d --name clair
      --restart on-failure "arminc/clair-local-scan:${CLAIR_LOCAL_SCAN_VERSION}"
    - apk add -U wget ca-certificates
    - wget "${CLAIR_REPOSITORY}/releases/download/v12/clair-scanner_linux_amd64"
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - retries=0
    - echo "Waiting for clair daemon to start"
    - >
      while( ! wget -T 10 -q -O /dev/null
      "http://${DOCKER_SERVICE}:6060/v1/namespaces" );
      do sleep 1 ; echo -n "." ;
      if [ "${retries}" -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ;
      fi ;
      retries=$(("${retries}"+1)) ; done
    - >
      ./clair-scanner -c "http://${DOCKER_SERVICE}:6060" --ip $(hostname -i) -r
      gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml
      "${CI_IMAGE}" || true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
  dependencies: []
  except:
    variables:
      - "$CONTAINER_SCANNING_DISABLED"

scan-dependencies:
  stage: SAST
  extends:
    - .ci-image-based-job-boilerplate
  script:
    - make scan-dependencies
